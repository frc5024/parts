import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent


plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Add the servlet plugin
    id 'war'
    id 'org.gretty' version '3.0.1'

    // Apply the application plugin to add support for building an application
    id 'application'
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()

    maven{
        url "http://repository.ops4j.org/maven2/"
    }

}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    implementation 'com.google.guava:guava:27.0.1-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.7.19'

    // Web testing
    testCompile 'io.github.bonigarcia:webdrivermanager:1.6.1' 
    testCompile 'org.seleniumhq.selenium:selenium-java:3.3.1'

    // Servlets
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'

    // H2
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    compile group: 'com.h2database', name: 'h2', version: '1.3.148'


    // // https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-jasper
    // compile group: 'org.apache.tomcat', name: 'tomcat-jasper', version: '10.0.0-M1'

    // // https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api
    // providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'

    // // https://mvnrepository.com/artifact/org.glassfish.web/javax.servlet.jsp
    // compile group: 'org.glassfish.web', name: 'javax.servlet.jsp', version: '2.3.4'


    // // https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api
    // providedCompile group: 'javax.servlet.jsp', name: 'javax.servlet.jsp-api', version: '2.3.3'


}

// Define the main class for the application
mainClassName = 'io.github.frc5024.parts.App'

// Fancy tests output
tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
               TestLogEvent.PASSED,
               TestLogEvent.SKIPPED,
               TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                   TestLogEvent.FAILED,
                   TestLogEvent.PASSED,
                   TestLogEvent.SKIPPED,
                   TestLogEvent.STANDARD_ERROR,
                   TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}
